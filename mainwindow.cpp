#include "mainwindow.h"
#include "./ui_mainwindow.h"

#include <QVBoxLayout>

#include <QWebEngineView>
#include <QWebEnginePage>
#include <QWebEngineSettings>
#include <QFile>

MainWindow::MainWindow(QWidget *parent)
  : QMainWindow(parent)
{
  QWidget *centralWidget = new QWidget(this);
  setCentralWidget(centralWidget);

  auto mainLayout = new QVBoxLayout;
  centralWidget->setLayout(mainLayout);


  m_view = new QWebEngineView(this);
  m_view->settings()->setAttribute(QWebEngineSettings::WebAttribute::LocalContentCanAccessRemoteUrls, true);
  m_view->settings()->setAttribute(QWebEngineSettings::WebAttribute::SpatialNavigationEnabled, true);
  // Qt 5.8 and higher
  m_view->settings()->setAttribute(QWebEngineSettings::AllowRunningInsecureContent, true);

  m_page = new QWebEnginePage(this);
  m_view->setPage(m_page);  // note, view does not take ownership of page

  constexpr bool isDebug_= true;
  if constexpr (isDebug_) {
    connect(m_view, &QWebEngineView::loadStarted, this, [](){ qDebug() << "QWebEngineView Loading started"; });
    connect(m_view, &QWebEngineView::loadProgress, this, [](int progress) { qDebug() << "QWebEngineView::loadProgress: " << progress; }); // &PreviewWebView::onLoadProgress);
    connect(m_page, &QWebEnginePage::loadStarted, this, []() { qDebug() << "Page Loading Started"; });
    connect(m_page, &QWebEnginePage::loadProgress, this, [](int progress) { qDebug() << "Page Loading Progress: " << progress; });
    connect(m_page, &QWebEnginePage::loadFinished, this, [](bool ok) { qDebug() << "Page Loading Finished: " << ok; });
  }

  connect(m_view, &QWebEngineView::loadFinished, this, &MainWindow::onLoadFinished);

  mainLayout->addWidget(m_view);


/*****************************************************************************************************************************************************
*                                                C O N F I G U R E    D E B U G    V A R I A B L E S                                                *
*****************************************************************************************************************************************************/

  // TODO: Switch me!
  constexpr bool loadFromQrc = true;

  if constexpr (loadFromQrc) {

    // TODO: Switch me!
    constexpr bool loadFromCDN = false;
    if constexpr (!loadFromCDN) {
      // This fails
      m_view->load(QUrl("qrc:///library/geometry_preview.html"));
    } else {
      // This works: instead of using a <script> block with the pasted three.min.js, I load the exact same one from a CDN
      m_view->load(QUrl("qrc:///library/geometry_preview_cdn.html"));
    }

  } else {
    QFile htmlFile(":/library/geometry_preview.html");
    if (htmlFile.open(QFile::ReadOnly | QFile::Text)) {
      QTextStream in(&htmlFile);
      QString htmlContent = in.readAll();
      m_view->setHtml(htmlContent);
    } else {
      qDebug() << "Error opening htmlFile=" << htmlFile.fileName();
    }
  }

}

void MainWindow::onLoadFinished(bool ok) {
  if (!ok) {
     m_view->setHtml("<html><head></head><body><h1>ERROR LOADING THE HTML</h1></body></html>");
    return;
  }

  QFile htmlFile(":/test.json");
  if (htmlFile.open(QFile::ReadOnly | QFile::Text)) {
    QTextStream in(&htmlFile);
    QString m_json = in.readAll();
    QString javascript = QString("init(") + m_json + QString(");\n animate();\n initDatGui();");
    m_view->page()->runJavaScript(javascript, [this](const QVariant& v) { qDebug() << "onJavaScriptFinished"; });
  } else {
    qDebug() << "Error opening htmlFile=" << htmlFile.fileName();
  }
}
